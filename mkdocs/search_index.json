{
    "docs": [
        {
            "location": "/", 
            "text": "TaskCat\n\n\n\n\nThis program requires python3\n\n\n\n\nCurrently in (beta release)\n\n\nPlease Report bugs here \nIssues\n\n\nFor helpful information see \nFrequently Asked Questions\n\n\nPython Module documentation\n\n\nClass \n[taskcat.Stacker]\n\n\nSub Class \n[taskcat.Reaper]\n\n\nWhat is TaskCat?\n\n\nTaskCat is a tool that tests AWS CloudFormation templates. It deploys your AWS CloudFormation template in multiple AWS Regions and generates a report with a pass/fail grade for each region. You can specify the regions and number of Availability Zones you want to include in the test, and pass in parameter values from your AWS CloudFormation template. TaskCat is implemented as a Python class that you import, instantiate, and run.\n\n\nTestCat was developed by the AWS Quick Start team to test AWS CloudFormation templates that automatically deploy workloads on AWS. We\u2019re pleased to make the tool available to all developers who want to validate their custom AWS CloudFormation\ntemplates across AWS Regions\n\n\nFiles you\u2019ll need\n\n\n\n\nconfig.yml\n - This file contains the test cases\n\n\n\n\nJSON input\n - This file contains the inputs that you want to pass to AWS CloudFormation template that is being tested\n\n\n\n\n\n\nStep 1 Building your configuration file\n\n\n\n\nStep 2 Building your JSON input file.\n\n\n\n\nStep 1 Creating a config.yml\n\n\nOpen the config.yml file with and editor and update the filenames to match your need.\n\n\nexample here:\n\nconfig.yml\n\n\nExample of config.yml\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nglobal\n:\n\n  \nowner\n:\n \nowner\n@\ncompany\n.\ncom\n\n  \nqsname\n:\n \nsample\n-\ncloudformation\n-\nproject\n \n-\n \nMust\n \nmatch\n \nthe\n \nroot\n \ndirectory\n \nof\n \nproject\n \n(\nusually\n \nthe\n \nname\n \nof\n \ngit\n \nrepo\n)\n\n  \n#\ns3bucket\n:\n \nprojectx\n-\ntemplates\n \n-\n \n(\nOptional\n)\n \nOnly\n \nneeded\n \nif\n \nyou\n \nwant\n \nto\n \nuse\n \na\n \nspecific\n \nbucket\n\n  \nregions\n:\n\n    \n-\n \nus\n-\neast\n-\n1\n\n    \n-\n \nus\n-\neast\n-\n2\n\n    \n-\n \nus\n-\nwest\n-\n1\n\n    \n-\n \nus\n-\nwest\n-\n2\n\n\ntests\n:\n\n  \n#\n \nThe\n \nfollowing\n \ntest\n \nwill\n \ntest\n \nin\n \nboth\n \nus\n-\nwest\n-\n1\n \nand\n \nus\n-\neast\n-\n1\n \nusing\n \nsample\n-\ncloudformation\n-\ninput\n.\njson\n \nas\n \ninputs\n\n  \nscenario\n-\n1\n:\n\n    \nregions\n:\n\n      \n-\n \nus\n-\nwest\n-\n1\n\n      \n-\n \nus\n-\neast\n-\n1\n\n    \ntemplate_file\n:\n \nsample\n-\ncloudformation\n-\nproject\n-\nnovpc\n.\ntemplate\n\n    \nparameter_input\n:\n \nsample\n-\ncloudformation\n-\ninput\n-\nnovpc\n.\njson\n\n  \n#\n \nThe\n \nfollowing\n \ntest\n \nwill\n \ntest\n \nin\n \nboth\n \nall\n \n4\n \nregion\n \ndefined\n \nin\n \nthe\n \nglobal\n \nregion\n \nsection\n \nusing\n \nsample\n-\ncloudformation\n-\ninput\n.\njson\n \nas\n \ninputs\n\n      \nscenario\n-\nall\n-\nregions\n:\n\n    \nparameter_input\n:\n \nsample\n-\ncloudformation\n-\ninput\n-\nwithvpc\n.\njson\n\n    \ntemplate_file\n:\n \nsample\n-\ncloudformation\n-\nproject\n-\nwithvpc\n.\ntemplate\n\n\n\n\n\n\n\nExample of project directory structure\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nsample\n-\ncloudformation\n-\nproject\n/\n\n\n\u251c\u2500\u2500\n \nLICENSE\n.\ntxt\n\n\n\u251c\u2500\u2500\n \nREADME\n.\nmd\n\n\n\u251c\u2500\u2500\n \nci\n\n\n\u2502\u00a0\n  \n\u251c\u2500\u2500\n \nconfig\n.\nyml\n \n-\n \nThis\n \nthe\n \nconfig\n \nfile\n \nthat\n \nwill\n \nhold\n \nall\n \nthe\n \ntest\n \ndefinitions\n\n\n\u2502\u00a0\n  \n\u251c\u2500\u2500\n  \nsample\n-\ncloudformation\n-\ninput\n-\nnovpc\n.\njson\n \n-\n  \nThis\n \nfile\n \ncontain\n \ninput\n \nthat\n \nwill\n \npass\n \nin\n \nduring\n \nstack\n \ncreation\n \n[\nvpc\n \nversion\n]\n \n(\nSee\n \nauto\n \nparms\n \nfor\n \nmore\n \ninfo\n)\n\n\n\u2502\u00a0\n  \n\u2514\u2500\u2500\n  \nsample\n-\ncloudformation\n-\ninput\n-\nwithvpc\n.\njson\n \n-\n  \nThis\n \nfile\n \ncontain\n \ninput\n \nthat\n \nwill\n \npass\n \nin\n \nduring\n \nstack\n \ncreation\n \n[\nno\n-\nvpc\n \nversion\n](\nSee\n \nauto\n \nparms\n \nfor\n \nmore\n \ninfo\n)\n\n\n\u251c\u2500\u2500\n \nscripts\n\n\n\u2502\u00a0\u00a0\n \n\u2514\u2500\u2500\n \nuserdata\n.\nsh\n \n-\n \nIf\n \nyou\n \nhave\n \nuserdata\n \nscripts\n \nyou\n \ncan\n \nload\n \nthen\n \nin\n \nthe\n \nscripts\n \ndirectory\n\n\n\u251c\u2500\u2500\n \nsubmodules\n  \n-\n \nIf\n \nyou\n \nhave\n \ngit\n \nsubmodules\n \nyou\n \ncan\n \nload\n \nthem\n \nin\n \nthe\n \nsubmodules\n \ndirectory\n\n\n\u2502\u00a0\u00a0\n \n\u2514\u2500\u2500\n \nquickstart\n-\naws\n-\nvpc\n\n\n\u2502\u00a0\u00a0\n     \n\u2514\u2500\u2500\n \ntemplates\n\n\n\u2502\u00a0\u00a0\n         \n\u2514\u2500\u2500\n \naws\n-\nvpc\n.\ntemplate\n\n\n\u2514\u2500\u2500\n \ntemplates\n\n    \n\u251c\u2500\u2500\n \nsample\n-\ncloudformation\n-\nproject\n-\nnovpc\n.\ntemplate\n\n    \n\u2514\u2500\u2500\n \nsample\n-\ncloudformation\n-\nproject\n-\nwithvpc\n.\ntemplate\n \n-\n \nSecond\n \nversion\n \non\n \ntemplate\n \nthat\n \nwill\n \ncreate\n \na\n \nvpc\n \nwith\n \nthe\n \nworkload\n\n\n\n\n\n\n\nStep 2 Building a json input file\n\n\nThe example below shows an input file for a stack that requires four parameters \nKeyPair\n,\nInstanceType\n, \nAvailablityZones\n and \nPassword\n\n\nNote: you can auto generate values at runtime using special tokens (see example below).\n\n\n\n\nThe following json will evaluate\n\n\n\n\nFrom:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n[{\n    \nParameterKey\n: \nKeyPair\n,\n    \nParameterValue\n: \nmykey\n\n}, {\n    \nParameterKey\n: \nInstanceType\n,\n    \nParameterValue\n: \nt2.small\n\n}, {\n    \nParameterKey\n: \nAvailablityZones\n,\n    \nParameterValue\n: \n$[taskcat_genaz_2]\n\n}, {\n    \nParameterKey\n: \nRandomString\n,\n    \nParameterValue\n: \n$[taskcat_random-string]\n\n}, {\n    \nParameterKey\n: \nRandomNumbers\n,\n    \nParameterValue\n: \n$[taskcat_random-numbers]\n\n}, {\n    \nParameterKey\n: \nGenerateUUID\n,\n    \nParameterValue\n: \n$[taskcat_genuuid]\n\n}, {\n    \nParameterKey\n: \nPassword\n,\n    \nParameterValue\n: \n$[taskcat_genpass_8A]\n\n}]\n\n\n\n\n\n\nTo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n[{\n    \nParameterKey\n: \nKeyPair\n,\n    \nParameterValue\n: \nmykey\n\n}, {\n    \nParameterKey\n: \nInstanceType\n,\n    \nParameterValue\n: \nt2.small\n\n} {\n    \nParameterKey\n: \nAvailablityZones\n,\n    \nParameterValue\n: \nus-east-1a, us-east1b\n\n}, {\n    \nParameterKey\n: \nRandomString\n,\n    \nParameterValue\n: \nyysuawpwubvotiqgwjcu\n\n}, {\n    \nParameterKey\n: \nRandomNumbers\n,\n    \nParameterValue\n: \n56188163597280820763\n\n}, {\n    \nParameterKey\n: \nGenerateUUID\n,\n    \nParameterValue\n: \n1c2e3483-2c99-45bb-801d-8af68a3b907b\n\n}, {\n    \nParameterKey\n: \nPassword\n,\n    \nParameterValue\n: \ntI8zN3iX8\n\n}]\n\n\n\n\n\n\nMore information on Auto-generated stack inputs\n\n\n(Passwords)\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenpass in invoked when taskcat_genpass_X is found\n\n\nX is length of the string\n\n\n\n\n(Optionally - you can specify the type of password by adding A or S)\n\n\n\n\nA alpha-numeric passwords\n\n\nS passwords with special characters\n\n\n\n\n\n\nExample: $[taskcat_genpass_8A]\nGenerates: \ntI8zN3iX8\n\nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!\n\n\n\n\n(Availability Zones)\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenaz in invoked when taskcat_genaz_X is found\n\n\nA number of AZ's will be selected from the region the stack is attempting to launch\n\n\n\n\n\n\nExample: $[taskcat_genaz_2]\n\nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)\n\n\n\n\n(Auto generated s3 bucket )\n\n\n\n\nExample: $[taskcat_autobucket]\nGenerates: \n\n\n\n\n(Generate UUID String)\n\n\n\n\nExample: $[taskcat_genuuid]\nGenerates: 1c2e3483-2c99-45bb-801d-8af68a3b907b\n\n\n\n\n(Generate Random String)\n\n\n\n\nExample: $[taskcat_random-string]\nGenerates: yysuawpwubvotiqgwjcu\n\n\nExample: $[taskcat_random-numbers]\nGenerates: 56188163597280820763\n\n\n\n\nInstalling TaskCat\n\n\nInstalling TaskCat (Docker install is recommended)\n\n\n\n\nPrerequisites: docker\n\n1\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E\n\n\n\n\nNote: (If you do not have root privileges taskcat will install in the current directory)\n\n\n\n\nInstalling via pip3 (for those who do not want to use the docker installer)\n\n\n\n\nPrerequisites: Python 3.5+ and pip3\n\n1\npip3 install taskcat\n\n\n\n\n\n\n\nInstalling via pip3 --user (for those who want to install taskcat into their homedir)\n\n\n\n\nPrerequisites: Python 3.5+ and pip3\nNote: (the user install dir is platform specific)\n\n\nFor Example: (On Mac: ~/Library/Python/3.x/bin/taskcat)\n\n\nFor Example: (On Linux: ~/.local/bin)\n\n\n\n\n1\npip3 install taskcat --user\n\n\n\n\n\n\n\n\nWarning: Be sure to add the python bin dir to your \n$PATH\n\n\n\n\nRunning TaskCat\n\n\n\n\nIf you have AWS credentials sourced (or default boto profile is available)\n\n1\n2\ntaskcat -c sample-taskcat-project/ci/config.yml\nIf you need to pass ACCESS and SECRET keys\n\n\n\n\ntaskcat -c sample-taskcat-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY\n\n1\n If you want to use a different account or profile\n\n\n\n\ntaskcat -c sample-taskcat-project/ci/config.yml -P boto-profile-name\n\n1\n2\n3\n### Local Parameter Overrides.\nIn certain situations it may be desirable to introduce local Parameter Override values. Taskcat supports this via two files.\nThe first is located .aws directory within the home-directory of the running user.\n\n\n\n\n~/.aws/taskcat_global_override.json\n\n1\n The second applies per-project and is located the \nCI\n directory.  \n\n\n\n\n\n/ci/taskcat_project_override.json\n```\n\n\n\n\nParameters defined in either file will supersede parameters within the normal parameter files. The override includes are read in the following order.\n- Home Directory (~/.aws/taskcat_global_override.json)\n- Project Directory (ci/taskcat_project_override.json)\n\n\nKeys defined in the Project Override with supersede the same keys defined in the Global Override.", 
            "title": "Home"
        }, 
        {
            "location": "/#taskcat", 
            "text": "This program requires python3", 
            "title": "TaskCat"
        }, 
        {
            "location": "/#currently-in-beta-release", 
            "text": "Please Report bugs here  Issues  For helpful information see  Frequently Asked Questions", 
            "title": "Currently in (beta release)"
        }, 
        {
            "location": "/#python-module-documentation", 
            "text": "Class  [taskcat.Stacker]  Sub Class  [taskcat.Reaper]", 
            "title": "Python Module documentation"
        }, 
        {
            "location": "/#what-is-taskcat", 
            "text": "TaskCat is a tool that tests AWS CloudFormation templates. It deploys your AWS CloudFormation template in multiple AWS Regions and generates a report with a pass/fail grade for each region. You can specify the regions and number of Availability Zones you want to include in the test, and pass in parameter values from your AWS CloudFormation template. TaskCat is implemented as a Python class that you import, instantiate, and run.  TestCat was developed by the AWS Quick Start team to test AWS CloudFormation templates that automatically deploy workloads on AWS. We\u2019re pleased to make the tool available to all developers who want to validate their custom AWS CloudFormation\ntemplates across AWS Regions", 
            "title": "What is TaskCat?"
        }, 
        {
            "location": "/#files-youll-need", 
            "text": "config.yml  - This file contains the test cases   JSON input  - This file contains the inputs that you want to pass to AWS CloudFormation template that is being tested    Step 1 Building your configuration file   Step 2 Building your JSON input file.", 
            "title": "Files you\u2019ll need"
        }, 
        {
            "location": "/#step-1-creating-a-configyml", 
            "text": "Open the config.yml file with and editor and update the filenames to match your need.  example here: config.yml", 
            "title": "Step 1 Creating a config.yml"
        }, 
        {
            "location": "/#example-of-configyml", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 global : \n   owner :   owner @ company . com \n   qsname :   sample - cloudformation - project   -   Must   match   the   root   directory   of   project   ( usually   the   name   of   git   repo ) \n   # s3bucket :   projectx - templates   -   ( Optional )   Only   needed   if   you   want   to   use   a   specific   bucket \n   regions : \n     -   us - east - 1 \n     -   us - east - 2 \n     -   us - west - 1 \n     -   us - west - 2  tests : \n   #   The   following   test   will   test   in   both   us - west - 1   and   us - east - 1   using   sample - cloudformation - input . json   as   inputs \n   scenario - 1 : \n     regions : \n       -   us - west - 1 \n       -   us - east - 1 \n     template_file :   sample - cloudformation - project - novpc . template \n     parameter_input :   sample - cloudformation - input - novpc . json \n   #   The   following   test   will   test   in   both   all   4   region   defined   in   the   global   region   section   using   sample - cloudformation - input . json   as   inputs \n       scenario - all - regions : \n     parameter_input :   sample - cloudformation - input - withvpc . json \n     template_file :   sample - cloudformation - project - withvpc . template", 
            "title": "Example of config.yml"
        }, 
        {
            "location": "/#example-of-project-directory-structure", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 sample - cloudformation - project /  \u251c\u2500\u2500   LICENSE . txt  \u251c\u2500\u2500   README . md  \u251c\u2500\u2500   ci  \u2502\u00a0    \u251c\u2500\u2500   config . yml   -   This   the   config   file   that   will   hold   all   the   test   definitions  \u2502\u00a0    \u251c\u2500\u2500    sample - cloudformation - input - novpc . json   -    This   file   contain   input   that   will   pass   in   during   stack   creation   [ vpc   version ]   ( See   auto   parms   for   more   info )  \u2502\u00a0    \u2514\u2500\u2500    sample - cloudformation - input - withvpc . json   -    This   file   contain   input   that   will   pass   in   during   stack   creation   [ no - vpc   version ]( See   auto   parms   for   more   info )  \u251c\u2500\u2500   scripts  \u2502\u00a0\u00a0   \u2514\u2500\u2500   userdata . sh   -   If   you   have   userdata   scripts   you   can   load   then   in   the   scripts   directory  \u251c\u2500\u2500   submodules    -   If   you   have   git   submodules   you   can   load   them   in   the   submodules   directory  \u2502\u00a0\u00a0   \u2514\u2500\u2500   quickstart - aws - vpc  \u2502\u00a0\u00a0       \u2514\u2500\u2500   templates  \u2502\u00a0\u00a0           \u2514\u2500\u2500   aws - vpc . template  \u2514\u2500\u2500   templates \n     \u251c\u2500\u2500   sample - cloudformation - project - novpc . template \n     \u2514\u2500\u2500   sample - cloudformation - project - withvpc . template   -   Second   version   on   template   that   will   create   a   vpc   with   the   workload", 
            "title": "Example of project directory structure"
        }, 
        {
            "location": "/#step-2-building-a-json-input-file", 
            "text": "The example below shows an input file for a stack that requires four parameters  KeyPair , InstanceType ,  AvailablityZones  and  Password  Note: you can auto generate values at runtime using special tokens (see example below).   The following json will evaluate", 
            "title": "Step 2 Building a json input file"
        }, 
        {
            "location": "/#from", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 [{\n     ParameterKey :  KeyPair ,\n     ParameterValue :  mykey \n}, {\n     ParameterKey :  InstanceType ,\n     ParameterValue :  t2.small \n}, {\n     ParameterKey :  AvailablityZones ,\n     ParameterValue :  $[taskcat_genaz_2] \n}, {\n     ParameterKey :  RandomString ,\n     ParameterValue :  $[taskcat_random-string] \n}, {\n     ParameterKey :  RandomNumbers ,\n     ParameterValue :  $[taskcat_random-numbers] \n}, {\n     ParameterKey :  GenerateUUID ,\n     ParameterValue :  $[taskcat_genuuid] \n}, {\n     ParameterKey :  Password ,\n     ParameterValue :  $[taskcat_genpass_8A] \n}]", 
            "title": "From:"
        }, 
        {
            "location": "/#to", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 [{\n     ParameterKey :  KeyPair ,\n     ParameterValue :  mykey \n}, {\n     ParameterKey :  InstanceType ,\n     ParameterValue :  t2.small \n} {\n     ParameterKey :  AvailablityZones ,\n     ParameterValue :  us-east-1a, us-east1b \n}, {\n     ParameterKey :  RandomString ,\n     ParameterValue :  yysuawpwubvotiqgwjcu \n}, {\n     ParameterKey :  RandomNumbers ,\n     ParameterValue :  56188163597280820763 \n}, {\n     ParameterKey :  GenerateUUID ,\n     ParameterValue :  1c2e3483-2c99-45bb-801d-8af68a3b907b \n}, {\n     ParameterKey :  Password ,\n     ParameterValue :  tI8zN3iX8 \n}]", 
            "title": "To:"
        }, 
        {
            "location": "/#more-information-on-auto-generated-stack-inputs", 
            "text": "", 
            "title": "More information on Auto-generated stack inputs"
        }, 
        {
            "location": "/#passwords", 
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genpass in invoked when taskcat_genpass_X is found  X is length of the string   (Optionally - you can specify the type of password by adding A or S)   A alpha-numeric passwords  S passwords with special characters    Example: $[taskcat_genpass_8A]\nGenerates:  tI8zN3iX8 \nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!", 
            "title": "(Passwords)"
        }, 
        {
            "location": "/#availability-zones", 
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genaz in invoked when taskcat_genaz_X is found  A number of AZ's will be selected from the region the stack is attempting to launch    Example: $[taskcat_genaz_2] \nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)", 
            "title": "(Availability Zones)"
        }, 
        {
            "location": "/#auto-generated-s3-bucket", 
            "text": "Example: $[taskcat_autobucket]\nGenerates:", 
            "title": "(Auto generated s3 bucket )"
        }, 
        {
            "location": "/#generate-uuid-string", 
            "text": "Example: $[taskcat_genuuid]\nGenerates: 1c2e3483-2c99-45bb-801d-8af68a3b907b", 
            "title": "(Generate UUID String)"
        }, 
        {
            "location": "/#generate-random-string", 
            "text": "Example: $[taskcat_random-string]\nGenerates: yysuawpwubvotiqgwjcu  Example: $[taskcat_random-numbers]\nGenerates: 56188163597280820763", 
            "title": "(Generate Random String)"
        }, 
        {
            "location": "/#installing-taskcat", 
            "text": "", 
            "title": "Installing TaskCat"
        }, 
        {
            "location": "/#installing-taskcat-docker-install-is-recommended", 
            "text": "Prerequisites: docker 1 curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E  \nNote: (If you do not have root privileges taskcat will install in the current directory)", 
            "title": "Installing TaskCat (Docker install is recommended)"
        }, 
        {
            "location": "/#installing-via-pip3-for-those-who-do-not-want-to-use-the-docker-installer", 
            "text": "Prerequisites: Python 3.5+ and pip3 1 pip3 install taskcat", 
            "title": "Installing via pip3 (for those who do not want to use the docker installer)"
        }, 
        {
            "location": "/#installing-via-pip3-user-for-those-who-want-to-install-taskcat-into-their-homedir", 
            "text": "Prerequisites: Python 3.5+ and pip3\nNote: (the user install dir is platform specific)  For Example: (On Mac: ~/Library/Python/3.x/bin/taskcat)  For Example: (On Linux: ~/.local/bin)   1 pip3 install taskcat --user    Warning: Be sure to add the python bin dir to your  $PATH", 
            "title": "Installing via pip3 --user (for those who want to install taskcat into their homedir)"
        }, 
        {
            "location": "/#running-taskcat", 
            "text": "If you have AWS credentials sourced (or default boto profile is available) 1\n2 taskcat -c sample-taskcat-project/ci/config.yml\nIf you need to pass ACCESS and SECRET keys  \ntaskcat -c sample-taskcat-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY 1  If you want to use a different account or profile  \ntaskcat -c sample-taskcat-project/ci/config.yml -P boto-profile-name 1\n2\n3 ### Local Parameter Overrides.\nIn certain situations it may be desirable to introduce local Parameter Override values. Taskcat supports this via two files.\nThe first is located .aws directory within the home-directory of the running user.  \n~/.aws/taskcat_global_override.json 1  The second applies per-project and is located the  CI  directory.     /ci/taskcat_project_override.json\n```   Parameters defined in either file will supersede parameters within the normal parameter files. The override includes are read in the following order.\n- Home Directory (~/.aws/taskcat_global_override.json)\n- Project Directory (ci/taskcat_project_override.json)  Keys defined in the Project Override with supersede the same keys defined in the Global Override.", 
            "title": "Running TaskCat"
        }, 
        {
            "location": "/FAQ/", 
            "text": "TaskCat FAQ\n\n\nFAQ\n\n\nCommonErrors\n\n\nError:\n\n\n1\nbotocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\n\n\n\n\n\n\nSolution: Set your default region to \nus-east-1\n\nFor boto profile set the default to \nus-east-1\n\n\n1\n2\n3\n[profile default]\n\n\noutput\n \n=\n \njson\n\n\nregion\n \n=\n \nus-east-1\n\n\n\n\n\n\n\n\nCritial failure with version all version below 2018.416.143234\n\n\nError: \n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nTraceback (most recent call last):\n  File \n/var/lib/jenkins/.local/bin/taskcat\n, line 58, in \nmodule\n\n    main()\n  File \n/var/lib/jenkins/.local/bin/taskcat\n, line 22, in main\n    tcat_instance.welcome(\ntaskcat\n)\n  File \n/var/lib/jenkins/.local/lib/python3.6/site-packages/taskcat/stacker.py\n, line 2192, in welcome\n    self.checkforupdate()\n  File \n/var/lib/jenkins/.local/lib/python3.6/site-packages/taskcat/stacker.py\n, line 2173, in checkforupdate\n    if version in current_version:\nTypeError: argument of type \nNoneType\n is not iterable\n\n\n\n\n\n\n\nDue to infrastructure changes in \nhttps://pypi.org\n version check will fail for older versions :-( please update to latest version\n\n\n\n\nSolution: (Get latest version)\n\n\n\n\nTo upgrade pip version    [ pip install --upgrade taskcat]\n\n\nTo upgrade docker version [ docker pull taskcat/taskcat ]", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#taskcat-faq", 
            "text": "", 
            "title": "TaskCat FAQ"
        }, 
        {
            "location": "/FAQ/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#commonerrors", 
            "text": "Error:  1 botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.   Solution: Set your default region to  us-east-1 \nFor boto profile set the default to  us-east-1  1\n2\n3 [profile default]  output   =   json  region   =   us-east-1", 
            "title": "CommonErrors"
        }, 
        {
            "location": "/FAQ/#critial-failure-with-version-all-version-below-2018416143234", 
            "text": "Error:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 Traceback (most recent call last):\n  File  /var/lib/jenkins/.local/bin/taskcat , line 58, in  module \n    main()\n  File  /var/lib/jenkins/.local/bin/taskcat , line 22, in main\n    tcat_instance.welcome( taskcat )\n  File  /var/lib/jenkins/.local/lib/python3.6/site-packages/taskcat/stacker.py , line 2192, in welcome\n    self.checkforupdate()\n  File  /var/lib/jenkins/.local/lib/python3.6/site-packages/taskcat/stacker.py , line 2173, in checkforupdate\n    if version in current_version:\nTypeError: argument of type  NoneType  is not iterable    Due to infrastructure changes in  https://pypi.org  version check will fail for older versions :-( please update to latest version   Solution: (Get latest version)   To upgrade pip version    [ pip install --upgrade taskcat]  To upgrade docker version [ docker pull taskcat/taskcat ]", 
            "title": "Critial failure with version all version below 2018.416.143234"
        }
    ]
}